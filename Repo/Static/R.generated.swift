//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  /// This `R.image` struct is generated, and contains static references to 1 images.
  struct image {
    /// Image `error`.
    static let error = Rswift.ImageResource(bundle: R.hostingBundle, name: "error")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "error", bundle: ..., traitCollection: ...)`
    static func error(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.error, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 17 localization keys.
    struct localizable {
      /// Value: Capital
      static let countryCapital = Rswift.StringResource(key: "country.capital", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Code
      static let currenciesCode = Rswift.StringResource(key: "currencies.code", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Countries
      static let countryNavigationTitle = Rswift.StringResource(key: "country.navigation.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Country
      static let countryTitle = Rswift.StringResource(key: "country.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Currencies
      static let countryCurrenciesTitle = Rswift.StringResource(key: "country.currencies.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Data not found
      static let errorDataNotFound = Rswift.StringResource(key: "error.data.not.found", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: General
      static let countryGeneralTitle = Rswift.StringResource(key: "country.general.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Got it
      static let errorSampleButton = Rswift.StringResource(key: "error.sample.button", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Name
      static let currenciesName = Rswift.StringResource(key: "currencies.name", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: No network
      static let errorNoNetwork = Rswift.StringResource(key: "error.no.network", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Region
      static let countryRegion = Rswift.StringResource(key: "country.region", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Sample description
      static let errorSampleDescription = Rswift.StringResource(key: "error.sample.description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Sample error
      static let errorSampleTitle = Rswift.StringResource(key: "error.sample.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Subregion
      static let countrySubregion = Rswift.StringResource(key: "country.subregion", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Symbol
      static let currenciesSymbol = Rswift.StringResource(key: "currencies.symbol", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Unknown error
      static let errorUnknown = Rswift.StringResource(key: "error.unknown", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Update
      static let countryNavigationButtonUpdate = Rswift.StringResource(key: "country.navigation.button.update", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: Capital
      static func countryCapital(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("country.capital", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "country.capital"
        }

        return NSLocalizedString("country.capital", bundle: bundle, comment: "")
      }

      /// Value: Code
      static func currenciesCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("currencies.code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "currencies.code"
        }

        return NSLocalizedString("currencies.code", bundle: bundle, comment: "")
      }

      /// Value: Countries
      static func countryNavigationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("country.navigation.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "country.navigation.title"
        }

        return NSLocalizedString("country.navigation.title", bundle: bundle, comment: "")
      }

      /// Value: Country
      static func countryTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("country.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "country.title"
        }

        return NSLocalizedString("country.title", bundle: bundle, comment: "")
      }

      /// Value: Currencies
      static func countryCurrenciesTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("country.currencies.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "country.currencies.title"
        }

        return NSLocalizedString("country.currencies.title", bundle: bundle, comment: "")
      }

      /// Value: Data not found
      static func errorDataNotFound(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error.data.not.found", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error.data.not.found"
        }

        return NSLocalizedString("error.data.not.found", bundle: bundle, comment: "")
      }

      /// Value: General
      static func countryGeneralTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("country.general.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "country.general.title"
        }

        return NSLocalizedString("country.general.title", bundle: bundle, comment: "")
      }

      /// Value: Got it
      static func errorSampleButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error.sample.button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error.sample.button"
        }

        return NSLocalizedString("error.sample.button", bundle: bundle, comment: "")
      }

      /// Value: Name
      static func currenciesName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("currencies.name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "currencies.name"
        }

        return NSLocalizedString("currencies.name", bundle: bundle, comment: "")
      }

      /// Value: No network
      static func errorNoNetwork(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error.no.network", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error.no.network"
        }

        return NSLocalizedString("error.no.network", bundle: bundle, comment: "")
      }

      /// Value: Region
      static func countryRegion(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("country.region", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "country.region"
        }

        return NSLocalizedString("country.region", bundle: bundle, comment: "")
      }

      /// Value: Sample description
      static func errorSampleDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error.sample.description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error.sample.description"
        }

        return NSLocalizedString("error.sample.description", bundle: bundle, comment: "")
      }

      /// Value: Sample error
      static func errorSampleTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error.sample.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error.sample.title"
        }

        return NSLocalizedString("error.sample.title", bundle: bundle, comment: "")
      }

      /// Value: Subregion
      static func countrySubregion(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("country.subregion", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "country.subregion"
        }

        return NSLocalizedString("country.subregion", bundle: bundle, comment: "")
      }

      /// Value: Symbol
      static func currenciesSymbol(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("currencies.symbol", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "currencies.symbol"
        }

        return NSLocalizedString("currencies.symbol", bundle: bundle, comment: "")
      }

      /// Value: Unknown error
      static func errorUnknown(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error.unknown", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error.unknown"
        }

        return NSLocalizedString("error.unknown", bundle: bundle, comment: "")
      }

      /// Value: Update
      static func countryNavigationButtonUpdate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("country.navigation.button.update", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "country.navigation.button.update"
        }

        return NSLocalizedString("country.navigation.button.update", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R {
  fileprivate init() {}
}
